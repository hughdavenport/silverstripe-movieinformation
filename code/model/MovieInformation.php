<?php

/**
 * Page to display movie information
 * Page that displays movie information retrieved from the OMDb API
 *
 * @package silverstripe
 * @subpackage movieinformation
 */
class MovieInformation extends Page {

	/**
	 * Get custom CMS Fields for this page.
	 * Changes the title field to use the {@link MovieTitleField} custom field.
	 * Sets the URLSegement to be a read only version, as it is autogenerated on write.
	 * Removes the MenuTitle and Content fields, as MenuTitle is set to be the same as the title
	 * and the Content field is not used.
	 */
	public function getCMSFields() {
		$self =& $this;
		$this->beforeUpdateCMSFields(function ($fields) use ($self) {
			$titleField = MovieTitleField::create('Title',
			                                      _t('MovieInformation.Title'),
			                                      $this->Title);
			$fields->insertBefore($titleField, 'URLSegment');
			// Create read only URL segment. Needed for the javascript to call back to the controller
			$urlSegmentField = ReadonlyField::create('URLSegment_RO',
			                                         _t('SiteTree.URLSegment'),
			                                         $this->PreviewLink());
			$fields->insertAfter($urlSegmentField, 'Title');
			// Hide the fields we don't want
			$fields->push(HiddenField::create('URLSegment'));
			$fields->push(HiddenField::create('MenuTitle'));
			$fields->push(HiddenField::create('Content'));
		});
		$fields = parent::getCMSFields();
		return $fields;
	}

	/**
	 * Regenerate the URLSegment and MenuTitle based off the title
	 */
	protected function onBeforeWrite() {
		parent::onBeforeWrite();
		$this->MenuTitle = $this->Title;
		$this->URLSegment = $this->generateURLSegment($this->Title);
		$count = 2;
		while(!$this->validURLSegment()) {
			$this->URLSegment = preg_replace('/-[0-9]+$/', null, $this->URLSegment) . '-' . $count;
			$count++;
		}
		$this->syncLinkTracking();
	}

	/**
	 * Determine whether a member can publish this page.
	 * Any member can publish this page as long as it is a valid movie.
	 *
	 * @param Member $member Set to false if you want to explicitly test permissions without a valid user (useful for
	 *                       unit tests)
	 * @return boolean
	 */
	public function canPublish($member = null) {
		return $this->isValid() !== false && parent::canPublish($member);
	}

	/**
	 * Test whether this movie is valid.
	 * Connects to OMDb API to see whether a movie with a title the same as this page exists.
	 *
	 * @return boolean
	 */
	public function isValid() {
		$api = new RestfulService(
			'http://www.omdbapi.com/'
		);

		$api->setQueryString(array(
			'r'        => 'xml',        // RestfulService only supports XML
			'type'     => 'movie',      // Only grab movies
			't'        => $this->Title, // User supplied search
			'plot'     => 'full',       // Get short in second query
			'tomatoes' => 'true',       // Get rotten tomatoes ratings
			'v'        => 1,            // Should put in for futureproof
		));

		$results = $api->request();
		$body = $results->getBody();
		if(!strstr($body, "<")) {
			// An error with the xml
			return false;
		}
		if($api->getAttribute($body, '' , 'root', 'response') === 'False') {
			// server said no!
			return false;
		}
		if($api->getAttributes($body, 'movie')->count() == 0) {
			// server SHOULD have said no
			return false;
		}

		// We should be good, return the body to save a query ;)
		return $body;
	}
}

/**
 * Controller for the movie information page.
 * Uses the OMDb API to search for movies, and to get information about a saved page.
 *
 * @package silverstripe
 * @subpackage movieinformation
 */
class MovieInformation_Controller extends Page_Controller {

	private static $allowed_actions = array (
		"getmovies",
	);

	/**
	 * Search for a movie
	 * Uses OMDb API to search for a movie, and returns a JSON response with a selection of
	 * titles that match the search term.
	 *
	 * @param SS_HTTPRequest $request The request object
	 * @return SS_HTTPResponse A json object containing search results
	 */
	public function getmovies(SS_HTTPRequest $request) {
		$search = $request->allParams()['ID'];
		$api = new RestfulService(
			'http://www.omdbapi.com/'
		);

		$api->setQueryString(array(
			'r'    => 'xml',   // RestfulService only supports XML
			'type' => 'movie', // Only grab movies
			's'    => $search, // User supplied search
			'v'    => 1,       // Should put in for futureproof
		));

		$results = $api->request();
		$results = $api->getAttributes($results->getBody(), 'Movie');
		$titles = array();
		if($results) {
			foreach($results as $result) {
				$titles[] = $result->getField('Title');
			}
		}
		$response = array(
			'search'  => $search,
			'results' => $titles,
		);
		$this->response->setBody(json_encode($response));
		$this->response->addHeader('Content-type', 'application/json');
		return $this->response;
	}

	/**
	 * Initialize the controller
	 *
	 */
	public function init() {
		parent::init();
		$module_dir = basename(dirname(dirname(__DIR__)));
		Requirements::css($module_dir . '/css/MovieInformation.css');
	}

	/**
	 * Get information about the current movie to display.
	 * Uses the OMDb API indirectly through the {@link MovieInformation->getInfo} function which
	 * returns the XML body.
	 *
	 * Gets the rotten tomato information as well as the IMDb information. Also obtains both the
	 * short and long version of the plot (at the expense of another query). In future this could
	 * become configurable.
	 *
	 * @return ArrayData The information about the current pages movie
	 */
	public function getInfo() {
		// This will get us XML body to play with as well as testing validity
		$body = $this->isValid();
		if($body === false) {
			throw new SS_HTTPResponse_Exception(ErrorPage::response_for(404), 404);
		}

		$api = new RestfulService(
			'http://www.omdbapi.com/'
		);

		$results = $api->getAttributes($body, 'movie');

		$return = $results[0];

		// Get short plot as well

		$api->setQueryString(array(
			'r'    => 'xml',        // RestfulService only supports XML
			'type' => 'movie',      // Only grab movies
			't'    => $this->Title, // User supplied search
			'plot' => 'short',      // Get short in second query
			'v'    => 1,            // Should put in for futureproof
		));

		$results = $api->request();
		$results = $api->getAttributes($results->getBody(), 'movie');

		if($results && !empty($results)) {
			$results = $results[0];
			$return->setField('shortPlot', $results->getField('plot'));
		}

		return $return;
	}

}
